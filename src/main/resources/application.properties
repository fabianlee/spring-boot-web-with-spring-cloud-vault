# profiles are for load variables based on environment
spring.profiles.active=dev

# logging levels to console, which is typical for containers
#logging.level=WARN
#logging.level.org.fabianlee.springbootwithvaultsidecar=INFO

# https://docs.spring.io/spring-cloud-vault/reference/appendix.html
spring.cloud.vault.enabled=true

# URL can be to remote Vault server, in-cluster, or local Vault sidecar proxy
#spring.cloud.vault.uri=http://vault.vault.svc.cluster.local:8200
#spring.cloud.vault.uri=http://localhost:8200
spring.cloud.vault.uri=${VAULT_URI}

#spring.cloud.vault.namespace=default #only enterprise version

# versioned kv2 engine with secret at: secret/webapp/config
spring.cloud.vault.kv.enabled=true
# works even when 'spring.profiles.active' is defined
spring.cloud.vault.kv.backend=${VAULT_BACKEND}
spring.cloud.vault.kv.default-context=${VAULT_CONTEXT}
spring.cloud.vault.kv.profiles=${VAULT_PROFILE}

## this block works without error, BUT only when 'spring.profiles.active' is not defined
##spring.cloud.vault.kv.backend=secret
##spring.cloud.vault.kv.default-context=webapp/config

# https://docs.spring.io/spring-cloud-vault/reference/config-data.html#vault.configdata.locations
#spring.config.import=vault://

# 'kubernetes' authentication mode for Vault (kube-API for TokenReview)
spring.cloud.vault.authentication=KUBERNETES
spring.cloud.vault.kubernetes.role=${VAULT_ROLE}
spring.cloud.vault.kubernetes.kubernetes-path=kubernetes
spring.cloud.vault.kubernetes.service-account-token-file=/var/run/secrets/kubernetes.io/serviceaccount/token