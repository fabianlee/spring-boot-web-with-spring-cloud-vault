plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.12'
	id 'io.spring.dependency-management' version '1.1.3'

        // local docker plugin for building image
        id 'com.palantir.docker' version '0.35.0'
}

group = 'org.fabianlee'
version = project.hasProperty('version') ? version : '1.0.0'

// additional variables
ext.dockerOwner = 'fabianlee'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.4")
}

// makes BuildProperties available from Spring context
springBoot {
    buildInfo()
}

bootJar {
    // without version so Dockerfile can be static
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

// create minimal base image project for OS package and commands
// https://plugins.gradle.org/plugin/com.palantir.docker
tasks.docker.dependsOn(bootJar)
docker() {
    name "${project.dockerOwner}/${project.projectDir.getName()}:${project.version}"
    dockerfile file("$buildDir/resources/main/docker/Dockerfile")
    files tasks.bootJar.outputs, 'README.md'
    noCache false
}


task localDockerTest(type:Exec, dependsOn: 'docker') {
    def str = "docker run --name test1 --rm --network=host --security-opt seccomp=unconfined ${project.dockerOwner}/${project.projectDir.getName()}:${project.version} -- java -version"
    doLast {
      println(str)
      commandLine str.split(" ")
    }
}
task localDockerRun(type:Exec,dependsOn: 'docker') {
    def str = "docker run --name test1 --rm --network=host --security-opt seccomp=unconfined ${project.dockerOwner}/${project.projectDir.getName()}:${project.version}"
    doLast {
      println(str)
      commandLine str.split(" ")
    }
}



task prepareREADMEForBuildah(type: Copy) {
    group "OCI"
    from "."
    include "README.md"
    into "$buildDir/libs"
}
// takes Dockerfile, places into buildDir
task prepareForBuildah(type: Copy) {
    group "OCI"
    dependsOn ("bootJar","prepareREADMEForBuildah")
    from "src/main/resources/docker"
    include "Dockerfile"
    into "$buildDir/libs"
}

task buildah(type: Exec, dependsOn: 'prepareForBuildah') {
    group "OCI"
    workingDir "${buildDir}/libs"

    doFirst {
      println "Executing 'buildah' task in ${buildDir}"
    }
    // OPV = owner/project:version
    def OPV="${project.dockerOwner}/${project.projectDir.getName()}:${project.version}"
    commandLine "buildah", "bud", "-f", "Dockerfile", "-t", "${OPV}"
    doLast {
      exec {
        println "tagging for dockerHub also: docker.io/${OPV}"
        commandLine "buildah tag localhost/${OPV} docker.io/${OPV}".split()
      }
      exec {
        commandLine "buildah images ${OPV}".split()
      }
    }
}

// not doing dependsOn: buildah because that would take lengthy rebuild of image
task buildahPushDockerHub(type: Exec) {
    group "OCI"
    workingDir "${buildDir}/libs"

    // OPV = owner/project:version
    def OPV="${project.dockerOwner}/${project.projectDir.getName()}:${project.version}"
    commandLine "buildah push docker.io/${OPV}".split()
}


task podmanCleanup(type: Exec) {
    ignoreExitValue true
    commandLine "podman", "rm", "${project.name}"
}
task podman(type: Exec) {
    group "OCI"
    // buildah does not cache, so do not force rebuild
    //dependsOn "buildah"
    dependsOn podmanCleanup

    doFirst {
      println "To cleanup, run 'podman rm ${project.name}'"
    }

    // OPV = owner/project:version
    def OPV="${project.dockerOwner}/${project.projectDir.getName()}:${project.version}"
    commandLine "podman", "run", "-p", "8080:8080", "-p", "8080:8080", "--name", "${project.name}", "localhost/${OPV}", "--", "java", "-version"

}
